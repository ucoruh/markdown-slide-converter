package com.ucoruh.option;

import java.util.ArrayList;

import com.ucoruh.utils.Utils;

import lombok.Getter;
import lombok.Setter;

/**
 * 
 * Class representing the command-line options for the controller.
 * 
 * This includes options related to file and folder locations, build and
 * deployment options, and other settings.
 * 
 * This class contains constant values for various option names and values that
 * are used throughout the program.
 */
public class ControllerOptions {

	/** Prefix for web page files generated by MkDocs */
	public static final String MKDOCS_WEB_PREFIX = "mkdocs_";

	/** Prefix for document files generated by Pandoc */
	public static final String PANDOCS_DOC_PREFIX = "pandoc_";

	/** Prefix for PowerPoint files generated by Pandoc */
	public static final String PANDOCS_PPT_PREFIX = "panppt_";

	/** Postfix for PDF files generated by Pandoc */
	public static final String PANDOC_PDF_POSTFIX = "_doc";

	/** Postfix for Word files generated by Pandoc */
	public static final String PANDOC_DOCX_POSTFIX = "_word";

	/** Postfix for PDF slide files generated by Marp */
	public static final String MARP_PDF_POSTFIX = "_slide";

	/** Postfix for HTML slide files generated by Marp */
	public static final String MARP_HTML_POSTFIX = "_slide";

	/** Postfix for PowerPoint slide files generated by Marp */
	public static final String MARP_PPTX_POSTFIX = "_slide";

	/** File extension for Markdown files */
	public static final String MARKDOWN_EXTENSION = "md";

	/** File extension for PDF files */
	public static final String PDF_EXTENSION = "pdf";

	/** File extension for Word files */
	public static final String DOCX_EXTENSION = "docx";

	/** File extension for HTML files */
	public static final String HTML_EXTENSION = "html";

	/** File extension for PowerPoint files */
	public static final String PPTX_EXTENSION = "pptx";

	/** Command-line option for merging generated pages */
	public static final String MERGEPAGES_OPTION = "mergepages";

	/** Command-line option for building generated pages */
	public static final String BUILDPAGES_OPTION = "buildpages";

	/** Command-line option for deploying generated pages */
	public static final String DEPLOYPAGES_OPTION = "deploypages";

	/** Command-line option for generating pages from input files */
	public static final String GENERATEPAGES_OPTION = "generatepages";

	/** Command-line option for cleaning generated pages */
	public static final String CLEANPAGES_OPTION = "cleanpages";

	/** Command-line option for displaying help information */
	public static final String HELP_OPTION = "help";

	/** Command-line option for exporting diagrams from DrawIO files */
	public static final String DRAWIOEXPORT_OPTION = "drawioexport";

	/** Command-line option for converting PowerPoint files to Markdown */
	public static final String PPTX2MDCONVERT_OPTION = "pptx2mdconvert";

	/** Command-line option for specifying a file */
	public static final String FILE_OPTION = "file";

	/** Command-line option for specifying a folder */
	public static final String FOLDER_OPTION = "folder";

	/** Command-line option for using MkDocs */
	public static final String MKDOCS_OPTION = "mkdocs";

	/** Command-line option for using Pandoc */
	public static final String PANDOC_OPTION = "pandoc";

	/** Command-line option for overwriting existing files */
	public static final String OVERWRITE_OPTION = "overwrite";

	/** Command-line option for specifying the language used for generated pages */
	public static final String LANGUAGE_OPTION = "language";

	/** Command-line option for building generated pages */
	public static final String BUILD_OPTION = "build";

	/** Command-line option for rebuilding generated pages */
	public static final String REBUILD_OPTION = "rebuild";

	public ControllerOptions() {
		languages = new ArrayList<>();
	}

	/**
	 * @brief The type of option that has been specified.
	 */
	@Getter
	@Setter
	private OptionType optionType;

	/**
	 * @brief The path to the input file.
	 */
	@Getter
	@Setter
	private String fileInputPath;

	/**
	 * @brief The path to the output file.
	 */
	@Getter
	@Setter
	private String fileOutputPath;

	/**
	 * @brief The path to the input folder.
	 */
	@Getter
	@Setter
	private String folderInputPath;

	/**
	 * @brief The path to the output folder.
	 */
	@Getter
	@Setter
	private String folderOutputPath;

	/**
	 * @brief Whether to overwrite existing files in the output folder or not.
	 */
	@Getter
	@Setter
	private boolean overwriteIsSet;

	/**
	 * @brief Whether to use MkDocs to generate the output or not.
	 */
	@Getter
	@Setter
	private boolean mkdocsIsSet;

	/**
	 * @brief Whether to use Pandoc to generate the output or not.
	 */
	@Getter
	@Setter
	private boolean pandocIsSet;

	/**
	 * @brief Whether to build the site or not.
	 */
	@Getter
	@Setter
	private boolean buildIsSet;

	/**
	 * @brief Whether to force a full rebuild of the site or not.
	 */
	@Getter
	@Setter
	private boolean rebuildIsSet;

	/**
	 * @brief An array of language codes to include in the output.
	 */
	@Getter
	@Setter
	private ArrayList<String> languages;

	/**
	 * @brief Whether the file has been set or not.
	 * @note This field is annotated with the `@Getter` annotation to generate a
	 *       getter method for it.
	 */
	public boolean isFileSet() {
		return !Utils.checkStringNullOrEmpty(this.fileInputPath);
	}

	/**
	 * @brief Whether the folder has been set or not.
	 * @note This field is annotated with the `@Getter` annotation to generate a
	 *       getter method for it.
	 */
	public boolean isFolderSet() {
		return !Utils.checkStringNullOrEmpty(this.folderInputPath);
	}

	/**
	 * @brief Whether the language has been set or not.
	 */
	public boolean isLanguageSet() {

		return languages.size() > 0;
	}

}
